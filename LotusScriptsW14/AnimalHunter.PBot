const ui = Java.type('haven.purus.pbot.PBotAPI').ui();
const PBot = Java.type("haven.purus.pbot.PBotAPI");
const PBotUtils = Java.type('haven.purus.pbot.PBotUtils');
const PBotGobAPI = Java.type('haven.purus.pbot.PBotGobAPI');
const PBotCharacterAPI = Java.type('haven.purus.pbot.PBotCharacterAPI');
const PBotWindowAPI = Java.type('haven.purus.pbot.PBotWindowAPI');

const VERSION_NAME = "1.1";
const WINDOW_NAME = "ShootTarget";
const COOLDOWN_DURATION = 3400;
const SHOT_RANGE = 150;
const SEARCH_RADIUS = 250;
const ARROW_PICKUP_RADIUS = 300;
const WINDOW_WIDTH = 170;
const WINDOW_HEIGHT = 140;

const window = PBotUtils.PBotWindow(ui, WINDOW_NAME, WINDOW_WIDTH, WINDOW_HEIGHT, ScriptID);
const infoRadius = window.addLabel("Radius: " + SEARCH_RADIUS, 10, 10);
const statusLbl = window.addLabel("Status: Idle", 10, 20);
const progressBarLbl = window.addLabel("Progress: [----------]", 10, 30);
const cooldownLbl = window.addLabel("Cooldown: 0", 10, 70);
window.addLabel("_______________", 20, 120);
const cboxArrowPick = window.addCheckbox("checkboxPickArrows", "Collect Arrows", false, 10, 110);

// Adding default values
cboxArrowPick.setValue(true);

const updateWindow = (status, progress) => {
  statusLbl.settext("Status: " + status);
  progressBarLbl.settext("Progress: " + progress);
};

function convertCooldownToProgress(cooldownTimer) {
  const progress = Math.min(1, cooldownTimer / COOLDOWN_DURATION);
  return progress;
}

function getProgressBar(progress) {
  const numDots = Math.floor(progress * 10);
  const progressBar = "[" + ">".repeat(numDots) + "-".repeat(10 - numDots) + "]";
  return progressBar;
}

function searchForAnimals(radius) {
  const animalGobs = [
    'gfx/terobjs/archerytarget',
    'gfx/kritter/boar/boar',
    'gfx/kritter/wolverine/wolverine',
    'gfx/kritter/otter/otter',
    'gfx/kritter/cattle/cattle',
    'gfx/kritter/fox/fox',
    'gfx/kritter/reddeer/reddeer',
    'gfx/kritter/beaver/beaver',
    'gfx/kritter/badger/badger',
    'gfx/kritter/sheep/sheep',
    'gfx/kritter/bear/bear',
    'gfx/kritter/deer/deer',
    'gfx/kritter/wolf/wolf',
    'gfx/kritter/moose/moose',
    'gfx/kritter/swan/swan', 
    'gfx/kritter/lynx/lynx', 
    'gfx/kritter/rabbit/rabbit',
    'gfx/kritter/rat/caverat',
    'gfx/kritter/bat/bat',
  ];
  for (let i = 0; i < animalGobs.length; i++) {
    const gob = PBotGobAPI.findGobByNames(ui, parseFloat(radius), animalGobs[i]);
    if (gob) {
      return gob;
    }
  }
  return null;
}


function searchForArrows(radius) {
  const gob = PBotGobAPI.findGobByNames(ui, parseFloat(ARROW_PICKUP_RADIUS), 'gfx/terobjs/items/arrow');
  if (gob) {
    return gob;
  }
  return null;
}
function searchForArrows(radius) {
  const gob = PBotGobAPI.findGobByNames(ui, parseFloat(ARROW_PICKUP_RADIUS), 'gfx/terobjs/items/arrow');
  if (gob) {
    return gob;
  }
  return null;
}

function distanceToGob(gob) {
  const gobPos = gob.getRcCoords().floor();
  const playerPos = PBotGobAPI.player(ui).getRcCoords().floor();
  const distanceX = gobPos.x - playerPos.x;
  const distanceY = gobPos.y - playerPos.y;
  const total = pythagorean(distanceX, distanceY);
  return total;
}

function pythagorean(sideA, sideB) {
  return Math.sqrt(Math.pow(sideA, 2) + Math.pow(sideB, 2));
}

function isBat(a) {
    let res = false;
    try {
        let gobName = a.getResname();
        res = gobName.startsWith("gfx/kritter/bat/bat");
    } catch (e) { }
    return res;
} 
function isBoar(a) {
    let res = false;
    try {
        let gobName = a.getResname();
        res = gobName.startsWith("gfx/kritter/boar/boar");
    } catch (e) { }
    return res;
} 

const main = () => {
  let stop = false;
  let target = null;
  let targetDistance = null;

  PBotUtils.sysMsg(ui, "Bot Start", 127, 255, 0);
  const mainStartTime = Date.now();
  let shootTimerStart = 0; // Declare the shoot timer variable

  do {
    updateWindow("Starting Loop", getProgressBar(0));
    const loopStartTime = Date.now();
    const animalGob = searchForAnimals(SEARCH_RADIUS);

    if (animalGob === null) {
      if (cboxArrowPick.getValue()) {
        const gob = searchForArrows(SEARCH_RADIUS);
        if (gob === null) {
          PBotUtils.sysMsg(ui, "Found no Animals", 220, 20, 60);
          PBotUtils.sysMsg(ui, "Found no Arrows", 255, 0, 0);
          stop = true;
        } else {
          updateWindow("Picking Up Arrow", getProgressBar(0.5));
          gob.doClick(3, 0);
          while (!stop && !window.closed() && PBotGobAPI.player(ui).isMoving()) {
            updateWindow("Waiting for player to stop moving", getProgressBar(0.75));
            PBotUtils.sleep(500);
          }
          PBotUtils.sleep(50);
        }
      }
    } else {
      const timeElapsed = Date.now() - shootTimerStart;
      const progress = convertCooldownToProgress(timeElapsed);
      updateWindow("Cooldown Timer:", getProgressBar(progress));

      let distanceToAnimal = distanceToGob(animalGob);
      PBotUtils.sleep(300);
      let newdistanceToAnimal = distanceToGob(animalGob);
      let deltaDistance = distanceToAnimal - newdistanceToAnimal;
      PBotUtils.sysMsg(ui, "difference: " + deltaDistance, 255, 20, 147);

      //ATTACKS IF TARGET IS STANDING STILL MORE THEN 300MS
      if (deltaDistance < 5 && isBat(animalGob)) {
        animalGob.doClick(3, 0);
        PBotUtils.sysMsg(ui, "Picking up Bat!", 255, 20, 147);
        updateWindow("Picking Up!", getProgressBar(0));
      } else if (isBoar(animalGob)){
        PBotCharacterAPI.doAct(ui, "lift");
        PBotUtils.sleep(300);
        animalGob.doClick(1, 0);
        PBotUtils.sysMsg(ui, "Picking up Boar!", 255, 20, 147);
        updateWindow("Picking Up!", getProgressBar(0));
      }

      if (timeElapsed >= COOLDOWN_DURATION) {
        const distance = distanceToGob(animalGob);
        if (distance < SHOT_RANGE) {
          // Perform shooting logic here
          updateWindow("Shooting:", getProgressBar(progress));
          PBotUtils.sysMsg(ui, "Shooting: " + animalGob.getResname(), 255, 105, 180);
          PBotCharacterAPI.doAct(ui, "shoot");
          animalGob.doClick(1, 0);
          if (PBotUtils.getHourglass(ui) !== -1) {
            PBotUtils.sysMsg(ui, "Resetting timer", 255, 20, 147);
            PBotCharacterAPI.cancelAct(ui);
            shootTimerStart = Date.now();
          }
        } else {
          PBotUtils.sysMsg(ui, "Too far away from target: " + distance + "  max distance: " + SHOT_RANGE, 255, 20, 147);
          updateWindow("Too far away!", getProgressBar(0));
        }

      

      }

      if (target !== null) {
        target.destroy();
      }

      if (targetDistance !== null) {
        targetDistance.destroy();
      }

      target = window.addLabel(animalGob.getResname().toString(), 10, 50);
      targetDistance = window.addLabel("Distance: " + Math.floor(distanceToGob(animalGob)), 10, 60);
      PBotUtils.sleep(50);
    }

    const funcStartTime = Date.now();
    let funcTimeSpentWaiting = 0;
    PBotUtils.sleep(50);
  } while (!stop && !window.closed());

  window.closeWindow();
  PBotUtils.sysMsg(ui, "Bot finished! (closing window)", 255, 165, 0);
};

main();
