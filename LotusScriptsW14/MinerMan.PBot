const ui = Java.type('haven.purus.pbot.PBotAPI').ui();
const PBotUtils = Java.type('haven.purus.pbot.PBotUtils');
const PBotCharacterAPI = Java.type("haven.purus.pbot.PBotCharacterAPI");
const PBotGobAPI = Java.type('haven.purus.pbot.PBotGobAPI');
const PBotWindowAPI = Java.type('haven.purus.pbot.PBotWindowAPI');
const window = PBotUtils.PBotWindow(ui, "StoneMan", 50, 110, ScriptID);
const btnStart = window.addButton("btnStartClick", "Start", 30, 35, 30);


// Define global variables
var inv = PBotUtils.playerInventory(ui);
var caveTiles = [];

const tick = 500;
let stop;
const shouldStop = () => {
	return stop || window.closed();
};
const main = () => {
	if (!stop && !window.closed()) {
	  const context = new Context();
	  while (!shouldStop()) {
	    context.update();
      PBotUtils.sysMsg(ui, "Update Loop!", 155, 225, 161);
      PBotUtils.sleep(tick);
	  }	 
	}
	PBotUtils.sysMsg(ui, "done!");
};
function btnStartClick(){
	btnStart.destroy();
	main();
}

class Context {
  constructor() {
    this.currentState = new SetupState(this);
    // add window labels
    this.statusLbl = window.addLabel("Initializing...", 10, 10);
    this.progressLbl = window.addLabel("", 10, 25);
    this.estLbl = window.addLabel("Estimated time:", 10, 40);
    this.timeLbl = window.addLabel("00", 10, 60);
    this.devider = window.addLabel("_______________", 25, 65);
  }
  
  setState(state) {
  	// perform any cleanup tasks for the processing state
  	PBotUtils.sysMsg(ui, "exit " + this.currentState.constructor.name + "! (waiting " + 25 + "ms)", 155, 125, 121);
    PBotUtils.sleep(25);
    this.currentState.exit();
    this.currentState = state;
    this.currentState.enter();
  }
  
  update() {
    this.currentState.update();
    // update window labels
    this.statusLbl.settext("Current state: " + this.currentState.constructor.name);
    this.progressLbl.settext("Progress: " + this.progress);
    this.timeLbl.settext(this.formatTime(this.elapsedTime) + " / " + this.formatTime(this.estimatedTime));
    
  }
  
  formatTime(milliseconds) {
    // helper function to format time in mm:ss format
    const seconds = Math.floor(milliseconds / 1000);
    const minutes = Math.floor(seconds / 60);
    const secondsRemainder = seconds % 60;
    return minutes.toString().padStart(2, "0") + ":" + secondsRemainder.toString().padStart(2, "0");
  }
}
// Define State classes
class State {
  constructor(context) {
    this.context = context;
  }
  enter() {}
  exit() {}
  update() {}
}

class SetupState extends State {
  enter() {
    PBotUtils.sysMsg(ui, "Starting Setup");
    caveTiles = this.selectTiles();
  }
  update() {
    // Transition to idle state once setup is complete
    if (caveTiles.length > 0) {
      PBotUtils.sysMsg(ui, "Cave Tiles Added: "  + caveTiles.length);
      this.context.setState(new IdleState(this.context));
    } else {
      PBotUtils.sysMsg(ui, "Starting Setup");
      caveTiles = this.selectTiles();
    }
  }
	selectTiles(){
		let caveTiles = [];
		PBotUtils.sysMsg(ui, "Select area to mine from!");
		PBotUtils.selectArea(ui);
		const aCoordDig = PBotUtils.getSelectedAreaA();
		const bCoordDig = PBotUtils.getSelectedAreaB();
		const maxX = Math.max(aCoordDig.x, bCoordDig.x);
		const minX = Math.min(aCoordDig.x, bCoordDig.x);
		const maxY = Math.max(aCoordDig.y, bCoordDig.y);
		const minY = Math.min(aCoordDig.y, bCoordDig.y);
		PBotUtils.sysMsg(ui, maxX + " ja " + minX + " JA " + maxY + " ja " + minY);
		for(let i=minY; i<maxY; i += 11) {
			for(let j=minX; j<maxX; j += 11) {
				if(PBotUtils.tileResnameAt(ui, j, i) === "gfx/tiles/cave") {
					caveTiles.push({x: j, y: i});
				}
			}
		}
		return caveTiles;
	}
}
class IdleState extends State {
  update() {
    if(PBotCharacterAPI.getStamina(ui) < 90)
        PBotUtils.drink(ui, true);
    if(PBotCharacterAPI.getEnergy(ui) < 22){
        PBotUtils.sysMsg(ui, "Not Enough Energy! (22+)");
        stop = true;
    } else if (caveTiles.length > 0) {
      this.context.setState(new MiningCursorState(this.context));
    }
      else {
        PBotUtils.sysMsg(ui, "No More Tiles");
        stop = true;
      }
    }
  }  

class MiningCursorState extends State {
  enter() {
    // perform any setup tasks for the walking state
    PBotUtils.sysMsg(ui, "Activating the mining cursor");
  }

  exit() {
    // perform any cleanup tasks for the walking state
  }

  update() {
      PBotCharacterAPI.cancelAct(ui);
      PBotCharacterAPI.doAct(ui, "mine"); //TODO FIX THIS WITH RETURING CURSOR INSTEAD OF THIS
      PBotUtils.sleep(tick);
      this.context.setState(new MiningState(this.context));    
  }
}


class WalkingState extends State {
  enter() {
    // perform any setup tasks for the walking state
  }
  
  exit() {
    // perform any cleanup tasks for the walking state
  }
  update() {
    if (PBotGobAPI.player(ui).isMoving())  {
    	PBotUtils.sleep(500);
    } else {
    	this.context.setState(new IdleState(this.context));
    }
  }
}
class MiningState extends State {
  enter() {
    PBotUtils.sysMsg(ui, "Starting to Mine");
    // Set up a timer to update inventory every second
  }

  exit() {
    // Stop the inventory timer when leaving digging state
  }

  update() {
    for (var i = caveTiles.length - 1; i >= 0; i--) {
      PBotUtils.sysMsg(ui, "Tile : " + PBotUtils.tileResnameAt(ui, caveTiles[i].x, caveTiles[i].x));
      PBotUtils.placeThing(ui, caveTiles[i].x, caveTiles[i].y);
    }


    // Check if inventory is full or no more stone tiles left to dig
    if (PBotUtils.pfLeftClick(ui, caveTiles[0].x, caveTiles[0].y)) {
      PBotUtils.sysMsg(ui, "Can Walk To Tile");
      PBotUtils.pfLeftClick(ui, caveTiles[0].x, caveTiles[0].y);
      PBotUtils.waitForHourglass(ui, 500);
      caveTiles.shift();
      this.context.setState(new IdleState(this.context));
    } else {
      PBotUtils.sysMsg(ui, "Cant Walk To Tile so I should mine");
      this.mine();
    	this.context.setState(new IdleState(this.context));
    }
  }

  	mine (tiles){
    PBotCharacterAPI.doAct(ui, "mine");
    PBotUtils.mapClick(ui, caveTiles[0].x, caveTiles[0].y, 1, 0);
    PBotCharacterAPI.cancelAct(ui);
		if(!PBotUtils.getHourglass(ui) >= 0) {
			PBotUtils.waitForHourglass(ui, 500);
		}
	}
}
class WalkingTocaveTilestate extends State {
  enter() {
    PBotUtils.sysMsg(ui, "Walking to stone tile");
    // Find the closest stone tile and walk to it
  }
  update() {
    if (PBotGobAPI.player(ui).isMoving())  {
    	PBotUtils.sleep(5000);
    } else {
    	this.context.setState(new IdleState(this.context));
    }
  }
}