const ui = Java.type('haven.purus.pbot.PBotAPI').ui(); 
const PBot = Java.type("haven.purus.pbot.PBotAPI");
const PBotUtils = Java.type('haven.purus.pbot.PBotUtils');
const PBotGobAPI = Java.type('haven.purus.pbot.PBotGobAPI');
const PBotWindowAPI = Java.type('haven.purus.pbot.PBotWindowAPI');

let stop;
const cooldownTime = 2000;
const radius = 200;
windowWidth = 170;
windowHeight = 140;
const window = PBotUtils.PBotWindow(ui, "", windowWidth, windowHeight, ScriptID);
const radiusLabel = window.addLabel("Search Radius: ", 10, 10);
const devider = window.addLabel("_______________", 25, 30);
const textEntry = window.addTextEntry(35, radius.toString(), 90, 5);
const cboxArrowPick = window.addCheckbox("checkboxPickArrows", "Collect Arrows", false, 10, 110);
window.addLabel("_______________", 20, 120);
const btnStart = window.addButton("btnStartClick", "Start", 70, 35, 145);

//Second Window
const infoRadius = window.addLabel("Radius: " + radius, 10, 20);
const statusLbl = window.addLabel("Status: Idle", 10, 105);
const progressBarLbl = window.addLabel("Progress: [----------]", 10, 125);
infoRadius.hide();
statusLbl.hide();
progressBarLbl.hide();


const updateWindow = (status, progress) => {
    statusLbl.settext("Status: " + status);
    progressBarLbl.settext("Progress: " + progress);
}
function getProgressBar(progress) {
    const numDots = Math.floor(progress * 10);
    const progressBar = "[" + ">".repeat(numDots) + "-".repeat(10 - numDots) + "]";
    return progressBar;
}

//Adding default values
cboxArrowPick.setValue(true);

const btnStartClick = () => {
    stop = false;
    radiusLabel.destroy();
    devider.destroy();
    btnStart.destroy();
    textEntry.destroy();
    cboxArrowPick.destroy();

    infoRadius.show();
    statusLbl.show();
    progressBarLbl.show();
    main();
}

const main = () => {
    PBotUtils.sysMsg(ui, "Bot Start", 127, 255, 0);
    const main_startTime = Date.now();
    let shootTimer_Start = 0; // Declare the shoot timer variable

    do {
        let loop_startTime = Date.now();
        let AnimalGob = searchForAnimals(1);

        if (AnimalGob == null) {
            if (cboxArrowPick.getValue()) {
                let gob = searchForArrows(radius);
                if (gob == null) {
                    PBotUtils.sysMsg(ui, "Found no Animals", 220, 20, 60);
                    PBotUtils.sysMsg(ui, "Found no Arrows", 255, 0, 0);
                    stop = true;
                } else {
                    gob.doClick(3, 0);
                }
            }
        } else {
            let timelapsed = Date.now() - shootTimer_Start;
            if (timelapsed >= cooldownTime) {
                PBotUtils.sysMsg(ui, "Shooting: " + AnimalGob.getResname(), 12, 231, 54);
                // Perform shooting logic here
                shootTimer_Start = Date.now();
            } else {
                PBotUtils.sysMsg(ui, "cooldownTime (" + (timelapsed+1) +  ")", 12, 231, 54);
            }

            updateWindow("Pathfinding", getProgressBar(0.5));
            const target = window.addLabel(AnimalGob.getResname().toString(), 10, 10);
            const targetDistance = window.addLabel("Distance: " + Math.floor(distanceToGob(AnimalGob)), 10, 30);
        }

        let func_startTime = Date.now();
        let func_timeSpentWaiting = 0;

        PBotUtils.sysMsg(ui, "Close Window To Stop (1000ms)", 245, 222, 179);
        PBotUtils.sleep(300);
    } while (!stop && !window.closed());

    window.closeWindow();
    PBotUtils.sysMsg(ui, "Bot finished! (closing window)", 255, 165, 0);
};



function searchForAnimals(radius) {
    let animalGobs = [
        'gfx/terobjs/archerytarget',
        'gfx/kritter/boar/boar',
        'gfx/kritter/wolverine/wolverine',
        'gfx/kritter/otter/otter',
        'gfx/kritter/cattle/cattle',
        'gfx/kritter/fox/fox',
        'gfx/kritter/reddeer/reddeer',
        'gfx/kritter/beaver/beaver',
        'gfx/kritter/badger/badger',
        'gfx/kritter/sheep/sheep',
    ];
    for (var i = 0; i < animalGobs.length; i++) {
        let gob = PBotGobAPI.findGobByNames(ui, parseFloat(radius), animalGobs[i]);
        if (gob) {
            return gob;
        }
    }
}
function searchForArrows(radius) {
    let gob = PBotGobAPI.findGobByNames(ui, parseFloat(radius), 'gfx/terobjs/items/arrow');
    if (gob) {
        return gob;
    }
}


function distanceToGob(gob) {
    const gobPos = gob.getRcCoords().floor();
    const playerPos = PBotGobAPI.player(ui).getRcCoords().floor();
    const distanceX = gobPos.x - playerPos.x;
    const distanceY = gobPos.y - playerPos.y;
    const total = pythagorean(distanceX, distanceY);
    return total;
}
function pythagorean(sideA, sideB) {
    return Math.sqrt(Math.pow(sideA, 2) + Math.pow(sideB, 2));
}
function checkboxPickArrows() { }